function [Y,Xf,Af] = myNeuralNetworkFunction(X,~,~)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Generated by Neural Network Toolbox function genFunction, 30-Apr-2018 08:38:53.
% 
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
% 
%   X = 1xTS cell, 1 inputs over TS timsteps
%   Each X{1,ts} = 26xQ matrix, input #1 at timestep ts.
% 
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
% 
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

  % ===== NEURAL NETWORK CONSTANTS =====
  
  % Input 1
  x1_step1_xoffset = [-0.472549019381404;-0.472549019381404;-0.480392156168818;-0.480392156168818;-0.480392156168818;-0.480392156168818;-0.480392156168818;-0.480392156168818;-0.480392156168818;-0.480392156168818;-0.480392156168818;-0.476470587775111;-0.468627449125052;-0.472549019381404;-0.468627449125052;-0.464705880731344;-0.464705880731344;-0.468627449125052;-0.472549019381404;-0.468627449125052;-0.472549019381404;-0.472549019381404;-0.472549019381404;-0.472549019381404;-0.472549019381404;-0.468627449125052];
  x1_step1_gain = [2.05645161338203;2.05645161338203;2.04000000144392;2.04000000144392;2.04000000144392;2.04000000144392;2.04000000144392;2.04000000144392;2.04000000144392;2.04000000144392;2.04000000144392;2.04819277204959;2.06477733189016;2.05645161338203;2.06477733189016;2.07317073519216;2.07317073519216;2.06477733189016;2.05645161338203;2.06477733189016;2.05645161338203;2.05645161338203;2.05645161338203;2.05645161338203;2.05645161338203;2.06477733189016];
  x1_step1_ymin = -1;
  
  % Layer 1
  b1 = [-2.20042325945183;0.30483735091963676];
  IW1_1 = [0.23017149287554867 0.23611284935273813 0.16996730075629576 0.13894742396284582 0.1060071306493312 0.082151082038538714 0.064353542883494028 0.093464638240443446 0.074530527785585388 0.089765249058299426 0.1539566012454161 0.11610823552249959 0.15335967638867506 -0.75826007649368066 -0.58667844341477338 -0.5038916277433293 -0.39046440991694309 -0.38618997402376376 -0.29124673696769388 -0.28318044391329772 -0.24564982351300219 -0.17791093327145568 -0.1507099242354828 -0.13597715469597213 -0.11296811414734367 -0.054295642253141832;0.37674163390955701 0.27547842398937572 0.19582528915416519 0.15035568896480167 0.10627262308250818 0.076971882293824831 0.040281514409404875 0.030453308386218996 0.00089613635039679075 -0.027395571971738 -0.0048994381983126119 -0.058672634635311423 -0.083454224210419287 0.020819641013794857 -0.016582097790613648 -0.040397594884587294 -0.039827993523931224 -0.067928731791365091 -0.067050828288660394 -0.083632458783691313 -0.10229888711803718 -0.072649800632442127 -0.096531786958503674 -0.092502233105108272 -0.12018374559386112 -0.10081355719492302];
  
  % Layer 2
  b2 = -0.39717630291291561;
  LW2_1 = [-0.59078308871388141 0.88221956017402514];
  
  % Output 1
  y1_step1_ymin = -1;
  y1_step1_gain = 21.2765957446809;
  y1_step1_xoffset = -0.047;
  
  % ===== SIMULATION ========
  
  % Format Input Arguments
  isCellX = iscell(X);
  if ~isCellX, X = {X}; end;
  
  % Dimensions
  TS = size(X,2); % timesteps
  if ~isempty(X)
    Q = size(X{1},2); % samples/series
  else
    Q = 0;
  end
  
  % Allocate Outputs
  Y = cell(1,TS);
  
  % Time loop
  for ts=1:TS
  
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1_gain,x1_step1_xoffset,x1_step1_ymin);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1_gain,y1_step1_xoffset,y1_step1_ymin);
  end
  
  % Final Delay States
  Xf = cell(1,0);
  Af = cell(2,0);
  
  % Format Output Arguments
  if ~isCellX, Y = cell2mat(Y); end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings_gain,settings_xoffset,settings_ymin)
  y = bsxfun(@minus,x,settings_xoffset);
  y = bsxfun(@times,y,settings_gain);
  y = bsxfun(@plus,y,settings_ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n)
  a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings_gain,settings_xoffset,settings_ymin)
  x = bsxfun(@minus,y,settings_ymin);
  x = bsxfun(@rdivide,x,settings_gain);
  x = bsxfun(@plus,x,settings_xoffset);
end
